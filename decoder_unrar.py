#Кодирование длин серий — это базовый алгоритм сжатия данных.
#В этой задаче мы реализуем алгоритм дешифровки строк, закодированных с помощью одного из самых простых  вариантов кодирования длин серий.
#На вход алгоритму подаётся строка, содержащая цифры и символы латинского алфавита. Эта строка разбивается на так называемые "серии",
# которые кодируются парой число-символ или просто символ (в таком случае число считается равным единице).
# Результат должен содержать эти серии в том же порядке, что они и встречаются в исходной строке,
# при этом каждая серия раскрывается в последовательность символов соответствующей длины.

#Например, рассмотрим строку
#3ab4c2CaB
#Разобъём её на серии
#3a b 4c 2C a B
#После чего преобразуем серии и получим исходную закодированную строку:
#aaabccccCCaB

def cutstring(str):
    l=findlen(str)
    if l !=0 :
        printcouple(str[l],int(str[0:l]))
        if len(str) > l+1:
            print(" -- " + str[l+1:] + " -- ")
            cutstring(str[l+1:])
    else:
        printcouple(str[0])
        if len(str) > 1:
            cutstring(str[1:])

def printcouple(c,d=1):
    for i in range(0,d):
        print(c,end='')

def findlen(strl):
    l=0
    while True:
        if strl[l].isdigit():
            l+=1
        else:
            break
    return l


cutstring(input())
#printcouple("r")


# from forum
#n = input()
#num = 0
#for l in n:
#    if not l.isdigit():  если не цифра, то
#        if num == 0:     если однозначное число
#            print(l, end='') печатаем символ указанное количество раз
#        else:            если не однозначное, то вычисленное количнство
#            print(l*num, end='')
#        num = 0
#    else:                 если цифра, то суммируем и получаем число каждый раз увеличивая порядок
#        num = num*10 + int(l)

# через регулярные выражения
#import re
#s = input()
#for i in re.findall(r'(\d+[a-zA-Z])', s):
#    s = s.replace(i, i[-1]*int(i[:-1]), 1)
#print(s)