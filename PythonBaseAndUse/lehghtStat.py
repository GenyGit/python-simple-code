#На вход программе подаётся строка, содержащая слова, разделённые пробелом.
# Программа должна вывести статистику длин слов в полученной строке, от меньшей длины слова к большей (см. пример).
#Словом считается последовательность произвольных символов, окружённая пробелами либо границами строки.
# Заметьте, что знаки препинания также относятся к слову.
#Формат ввода:
#Одна строка, содержащая последовательности латинских символов и знаков препинания, разделённые пробелом.
#Формат вывода:
#Для каждой длины слова, встречающейся в исходной строке, нужно указать количество слов с такой длиной
#длина: количество
#Статистика должна выводиться в порядке увеличения длины.
from collections import Counter
s = list(map(len, input().split()))
d = {}
d = Counter(i for i in s)
for (key, value) in sorted(d.items()):
    print(key, ": ", value)

#s = [len(x) for x in input().split()]
#for x in sorted({(i, s.count(i)) for i in s}):
#    print('{}: {}'.format(x[0], x[1]))

#Хочу поделиться полезной фишкой, которая позволяет, например, подсчитывать
#значения ключа без необходимости проверки есть ли уже такой ключ в словаре или нет.\
#    Таким образом никогда не будет ошибки отсутствия ключа.

#Метод.get(key, value) возвращает значение словаря по заданному ключу, если ключ существует, а
#если ключа нет - создаст его с заданным значением.
#
#dict[key] = dict.get(key, default_value) + 1
#
#lib = {}
#for item in input().split():
#    lib[len(item)] = lib.get(len(item), 0) + 1
#
#for key, value in sorted(lib.items()):
#    print(key, ": ", value, sep='')

#d = {}
#for i in input().split():
#    d[len(i)] = d.get(len(i), 0) + 1
#for i in sorted(d):
#    print(f'{i}: {d[i]}')


